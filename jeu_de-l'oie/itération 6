int D1 = 0;
int D2 = 0;
int joueur_actif=0;
int nb_players=5;
int players_colors= int(360/(nb_players+1));
int[][] plateau = new int [64][2];
int[][] players = new int [nb_players][2];
int taillecase= 40;
int plateau_y=taillecase/2;
boolean play=false;
int attente=0;
final int HOTEL=19;
final int LABYRINTHE=42;
final int TETEDEMORT=58;
final int OIES=9;
final int PRISON=52;
final int DEPART=0;
final int ARRIVER=63;
final int PUITS=3;
final int POSITION=0;
final int ATTENTE=1;
final color BG = color (240,224,211);

void settings() {
  size (taillecase*64, taillecase*10);
 
}
void draw() {


  for ( int i=0; i < nb_players; i++)
  {
    display_player(players[i][POSITION], i);
  }

  if (players[joueur_actif][POSITION]==ARRIVER)
  {
    endgame();
  }

  if (play) {


    if (players[joueur_actif][ATTENTE]==0) {
      D1 = LancerDes();
      D2 = LancerDes();
      println(joueur_actif, " ", players[joueur_actif][POSITION], " ", D1, "+", D2);

      mouvement_player(  D1, D2);
      if (players[joueur_actif][POSITION]==HOTEL) {
        players[joueur_actif][ATTENTE]=2;
      }
      if (players[joueur_actif][POSITION] == OIES)
      {
        mouvement_player(D1, D2);
      }
      if (players[joueur_actif][POSITION]==LABYRINTHE) {
        players[joueur_actif][POSITION]=30;
      }
      if (players[joueur_actif][POSITION]==TETEDEMORT) {
        players[joueur_actif][POSITION]=0;
      }
      if (players[joueur_actif][POSITION]==PUITS) {
        players[joueur_actif][ATTENTE]=-1;
      }
      if (players[joueur_actif][POSITION]==PRISON) {
        players[joueur_actif][ATTENTE]=-1;
      }
    } else {
      players[joueur_actif][ATTENTE]--;
      println("attente");
    }
    play=false;
  }
}

int check_case(int case_id) {
  int case_occuped= -1;
  for (int i=0; i<nb_players; i++) {
    if (i != joueur_actif) {
      if (players[i][POSITION]==case_id) {
        case_occuped=i;
      }
    }
  }
  return case_occuped;
}



void mouvement_player( int D1, int D2) {
  int future_case= 0;
  int player_found =0;
  display_case(players[joueur_actif][POSITION]);
  future_case = players[joueur_actif][POSITION] + D1 + D2;
  if (future_case > 63) {
    int ecart = future_case - 63;
    future_case = future_case - ecart * 2;
  }
  player_found = check_case(future_case);
  if (player_found >= 0)
  {
    players[player_found][POSITION]=players[joueur_actif][POSITION];
    players[player_found][ATTENTE]=0;
    // display_player(players[player_found][POSITION], player_found);
  }
  players[joueur_actif][POSITION]=future_case;
  // display_player(players[joueur_actif][POSITION], joueur_actif);
}


////void supp_player(int celulle) {
//  fill (143, 139, 163);
//  ellipse (plateau[celulle][0], plateau_y, taillecase/2, taillecase/2);
//  fill(0);
//  text(celulle, plateau[celulle][0], plateau_y);
//}

void display_player(int celulle, int joueur) 
{
  fill(BG);
  //noStroke();
  rect(32 * taillecase,plateau_y* (joueur + 2) * 1.3 ,taillecase * 64, (taillecase * 1.1f)/2);
  stroke(0);
   //fill (players_colors*(joueur+1), 99, 99);
  fill (players_colors*(joueur+1), 99, 99);
  ellipse (plateau[celulle][0], plateau_y* (joueur + 2) * 1.3 , taillecase/2, taillecase/2);
  fill(0);
  text(celulle, plateau[celulle][0], plateau_y);
}
void display_case(int i) {
  fill (#EDEDE8);
  switch(i) {
  case PUITS:
    fill(#61ADFC);
    break;
  case PRISON:
    fill(#F07816);
    break;
  case HOTEL:
    fill(#E71CE8);
    break;
  case LABYRINTHE:
    fill(#865E08);
    break;
  case TETEDEMORT:
    fill(#5A5753);
    break;
  case 9:
  case 18:
  case 27:
  case 36:
  case 45:
    fill(#F5EE11);
    break;
  case 0:
    fill(#2DFF00);
    break;
  case 63:
    fill(#21860B);
    break;
  }
  rect (plateau[i][0], plateau_y, taillecase, taillecase);
  textAlign(CENTER, CENTER);
  fill(0);
  text(i, plateau[i][0], plateau_y);
}
void display_plateau() {
  for (int i = 0; i < 64; i++) {
    display_case(i);
  }
}

void setup() {
  colorMode(HSB, 360, 100, 100);
  rectMode(CENTER);
  background(BG); 
  init_plateau();
  display_plateau();
}

void init_players() {
  for (int i=0; i<players.length; i++) {
    players[i][POSITION]=0;
    players[i][ATTENTE]=0;
  }
}

void init_plateau() {
  for (int i=0; plateau.length>i; i++) {
    plateau[i][0]=i*taillecase+taillecase/2;
    switch(i) {
    case DEPART:
      plateau[i][1]=DEPART;
      break;
    case PUITS:
      plateau[i][1]=PUITS;
      break;
    case OIES:
    case 18:
    case 27:
    case 36:
    case 45:
      plateau[i][1]=OIES;
      break;
    case HOTEL:
      plateau[i][1]=HOTEL;
      break;
    case LABYRINTHE:
      plateau[i][1]=LABYRINTHE;
      break;
    case PRISON:
      plateau[i][1]=PRISON;
      break;
    case TETEDEMORT:
      plateau[i][1]=TETEDEMORT;
      break;
    case ARRIVER:
      plateau[i][1]=ARRIVER;
      break;
    }
  }
}


int LancerDes() {

  return int(random(6)+1);
}

void endgame() {
  println("c'est gagn√©");
  noLoop();
}

void mouseClicked() {
  play = true;
  joueur_actif++;
  if (joueur_actif==nb_players) {
    joueur_actif=0;
  }
  println("joue un coup");
}
