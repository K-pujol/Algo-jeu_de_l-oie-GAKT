int nbCases = 64;
int caseSize = 20;
int nbJoueurs = 3;

int[] positions = new int[nbJoueurs];
color[] playerColors = new color[nbJoueurs];
int joueurActuel = 0;

void settings(){
size(nbCases * caseSize, 100);
}

void setup() {
  
  colorMode(HSB, 360, 100, 100);

  // Attribuer des couleurs bien distinctes
  for (int i = 0; i < nbJoueurs; i++) {
    float hue = random(360);
    // Vérifie que la couleur est suffisamment différente des autres
    boolean distinct;
    do {
      distinct = true;
      for (int j = 0; j < i; j++) {
        if (abs(hue - hue(playerColors[j])) < 60) {
          distinct = false;
          hue = random(360); // Réessaie
          break;
        }
      }
    } while (!distinct);

    playerColors[i] = color(hue, 100, 100);
    positions[i] = 0;
  }
}

void draw() {
  background(255);
  drawPlateau();
  drawPions();
}

void drawPlateau() {
  for (int i = 0; i < nbCases; i++) {
    fill(240);
    stroke(0);
    rect(i * caseSize, 60, caseSize, caseSize);
    fill(0);
    textAlign(CENTER, CENTER);
    text(i, i * caseSize + caseSize / 2, 60 + caseSize / 2);
  }
}

void drawPions() {
  for (int i = 0; i < nbJoueurs; i++) {
    int pos = positions[i];
    fill(playerColors[i]);
    ellipse(pos * caseSize + caseSize / 2, 30 + i * 10, 15, 15);
  }
}

void mousePressed() {
  // Lancer de dé (1 à 6)
  int de = int(random(1, 7));
  positions[joueurActuel] += de;

  // Limiter à la dernière case
  if (positions[joueurActuel] >= nbCases - 1) {
    positions[joueurActuel] = nbCases - 1;
  }

  println("Joueur " + (joueurActuel + 1) + " avance de " + de + " → position " + positions[joueurActuel]);

  // Tour suivant
  joueurActuel = (joueurActuel + 1) % nbJoueurs;
}
